{"remainingRequest":"/Users/szt/Desktop/iview-admin/node_modules/babel-loader/lib/index.js!/Users/szt/Desktop/iview-admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/szt/Desktop/iview-admin/src/store/module/app.js","dependencies":[{"path":"/Users/szt/Desktop/iview-admin/src/store/module/app.js","mtime":1539597142000},{"path":"/Users/szt/Desktop/iview-admin/.babelrc","mtime":1539597141000},{"path":"/Users/szt/Desktop/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":1539597352000},{"path":"/Users/szt/Desktop/iview-admin/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/Users/szt/Desktop/iview-admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/szt/Desktop/iview-admin/node_modules/@babel/runtime/helpers/builtin/es6/objectSpread\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.function.name\";\nimport _toConsumableArray from \"/Users/szt/Desktop/iview-admin/node_modules/@babel/runtime/helpers/builtin/es6/toConsumableArray\";\nimport { getBreadCrumbList, setTagNavListInLocalstorage, getMenuByRouter, getTagNavListFromLocalstorage, getHomeRoute, getNextRoute, routeHasExist, routeEqual, getRouteTitleHandled, localSave, localRead } from '@/libs/util';\nimport beforeClose from '@/router/before-close';\nimport { saveErrorLogger } from '@/api/data';\nimport router from '@/router';\nimport routers from '@/router/routers';\nimport config from '@/config';\nvar homeName = config.homeName;\n\nvar closePage = function closePage(state, route) {\n  var nextRoute = getNextRoute(state.tagNavList, route);\n  state.tagNavList = state.tagNavList.filter(function (item) {\n    return !routeEqual(item, route);\n  });\n  router.push(nextRoute);\n};\n\nexport default {\n  state: {\n    breadCrumbList: [],\n    tagNavList: [],\n    homeRoute: getHomeRoute(routers, homeName),\n    local: localRead('local'),\n    errorList: [],\n    hasReadErrorPage: false\n  },\n  getters: {\n    menuList: function menuList(state, getters, rootState) {\n      return getMenuByRouter(routers, rootState.user.access);\n    },\n    errorCount: function errorCount(state) {\n      return state.errorList.length;\n    }\n  },\n  mutations: {\n    setBreadCrumb: function setBreadCrumb(state, route) {\n      state.breadCrumbList = getBreadCrumbList(route, state.homeRoute);\n    },\n    setTagNavList: function setTagNavList(state, list) {\n      var tagList = [];\n\n      if (list) {\n        tagList = _toConsumableArray(list);\n      } else tagList = getTagNavListFromLocalstorage() || [];\n\n      if (tagList[0] && tagList[0].name !== homeName) tagList.shift();\n      var homeTagIndex = tagList.findIndex(function (item) {\n        return item.name === homeName;\n      });\n\n      if (homeTagIndex > 0) {\n        var homeTag = tagList.splice(homeTagIndex, 1)[0];\n        tagList.unshift(homeTag);\n      }\n\n      state.tagNavList = tagList;\n      setTagNavListInLocalstorage(_toConsumableArray(tagList));\n    },\n    closeTag: function closeTag(state, route) {\n      var tag = state.tagNavList.filter(function (item) {\n        return routeEqual(item, route);\n      });\n      route = tag[0] ? tag[0] : null;\n      if (!route) return;\n\n      if (route.meta && route.meta.beforeCloseName && route.meta.beforeCloseName in beforeClose) {\n        new Promise(beforeClose[route.meta.beforeCloseName]).then(function (close) {\n          if (close) {\n            closePage(state, route);\n          }\n        });\n      } else {\n        closePage(state, route);\n      }\n    },\n    addTag: function addTag(state, _ref) {\n      var route = _ref.route,\n          _ref$type = _ref.type,\n          type = _ref$type === void 0 ? 'unshift' : _ref$type;\n      var router = getRouteTitleHandled(route);\n\n      if (!routeHasExist(state.tagNavList, router)) {\n        if (type === 'push') state.tagNavList.push(router);else {\n          if (router.name === homeName) state.tagNavList.unshift(router);else state.tagNavList.splice(1, 0, router);\n        }\n        setTagNavListInLocalstorage(_toConsumableArray(state.tagNavList));\n      }\n    },\n    setLocal: function setLocal(state, lang) {\n      localSave('local', lang);\n      state.local = lang;\n    },\n    addError: function addError(state, error) {\n      state.errorList.push(error);\n    },\n    setHasReadErrorLoggerStatus: function setHasReadErrorLoggerStatus(state) {\n      var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      state.hasReadErrorPage = status;\n    }\n  },\n  actions: {\n    addErrorLog: function addErrorLog(_ref2, info) {\n      var commit = _ref2.commit,\n          rootState = _ref2.rootState;\n      if (!window.location.href.includes('error_logger_page')) commit('setHasReadErrorLoggerStatus', false);\n      var _rootState$user = rootState.user,\n          token = _rootState$user.token,\n          userId = _rootState$user.userId,\n          userName = _rootState$user.userName;\n\n      var data = _objectSpread({}, info, {\n        time: Date.parse(new Date()),\n        token: token,\n        userId: userId,\n        userName: userName\n      });\n\n      saveErrorLogger(info).then(function () {\n        commit('addError', data);\n      });\n    }\n  }\n};",{"version":3,"sources":["src/store/module/app.js"],"names":["getBreadCrumbList","setTagNavListInLocalstorage","getMenuByRouter","getTagNavListFromLocalstorage","getHomeRoute","getNextRoute","routeHasExist","routeEqual","getRouteTitleHandled","localSave","localRead","beforeClose","saveErrorLogger","router","routers","config","homeName","closePage","state","route","nextRoute","tagNavList","filter","item","push","breadCrumbList","homeRoute","local","errorList","hasReadErrorPage","getters","menuList","rootState","user","access","errorCount","length","mutations","setBreadCrumb","setTagNavList","list","tagList","name","shift","homeTagIndex","findIndex","homeTag","splice","unshift","closeTag","tag","meta","beforeCloseName","Promise","then","close","addTag","type","setLocal","lang","addError","error","setHasReadErrorLoggerStatus","status","actions","addErrorLog","info","commit","window","location","href","includes","token","userId","userName","data","time","Date","parse"],"mappings":"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","sourceRoot":"/Users/szt/Desktop/iview-admin","sourcesContent":["import {\n  getBreadCrumbList,\n  setTagNavListInLocalstorage,\n  getMenuByRouter,\n  getTagNavListFromLocalstorage,\n  getHomeRoute,\n  getNextRoute,\n  routeHasExist,\n  routeEqual,\n  getRouteTitleHandled,\n  localSave,\n  localRead\n} from '@/libs/util'\nimport beforeClose from '@/router/before-close'\nimport { saveErrorLogger } from '@/api/data'\nimport router from '@/router'\nimport routers from '@/router/routers'\nimport config from '@/config'\nconst { homeName } = config\n\nconst closePage = (state, route) => {\n  const nextRoute = getNextRoute(state.tagNavList, route)\n  state.tagNavList = state.tagNavList.filter(item => {\n    return !routeEqual(item, route)\n  })\n  router.push(nextRoute)\n}\n\nexport default {\n  state: {\n    breadCrumbList: [],\n    tagNavList: [],\n    homeRoute: getHomeRoute(routers, homeName),\n    local: localRead('local'),\n    errorList: [],\n    hasReadErrorPage: false\n  },\n  getters: {\n    menuList: (state, getters, rootState) => getMenuByRouter(routers, rootState.user.access),\n    errorCount: state => state.errorList.length\n  },\n  mutations: {\n    setBreadCrumb (state, route) {\n      state.breadCrumbList = getBreadCrumbList(route, state.homeRoute)\n    },\n    setTagNavList (state, list) {\n      let tagList = []\n      if (list) {\n        tagList = [...list]\n      } else tagList = getTagNavListFromLocalstorage() || []\n      if (tagList[0] && tagList[0].name !== homeName) tagList.shift()\n      let homeTagIndex = tagList.findIndex(item => item.name === homeName)\n      if (homeTagIndex > 0) {\n        let homeTag = tagList.splice(homeTagIndex, 1)[0]\n        tagList.unshift(homeTag)\n      }\n      state.tagNavList = tagList\n      setTagNavListInLocalstorage([...tagList])\n    },\n    closeTag (state, route) {\n      let tag = state.tagNavList.filter(item => routeEqual(item, route))\n      route = tag[0] ? tag[0] : null\n      if (!route) return\n      if (route.meta && route.meta.beforeCloseName && route.meta.beforeCloseName in beforeClose) {\n        new Promise(beforeClose[route.meta.beforeCloseName]).then(close => {\n          if (close) {\n            closePage(state, route)\n          }\n        })\n      } else {\n        closePage(state, route)\n      }\n    },\n    addTag (state, { route, type = 'unshift' }) {\n      let router = getRouteTitleHandled(route)\n      if (!routeHasExist(state.tagNavList, router)) {\n        if (type === 'push') state.tagNavList.push(router)\n        else {\n          if (router.name === homeName) state.tagNavList.unshift(router)\n          else state.tagNavList.splice(1, 0, router)\n        }\n        setTagNavListInLocalstorage([...state.tagNavList])\n      }\n    },\n    setLocal (state, lang) {\n      localSave('local', lang)\n      state.local = lang\n    },\n    addError (state, error) {\n      state.errorList.push(error)\n    },\n    setHasReadErrorLoggerStatus (state, status = true) {\n      state.hasReadErrorPage = status\n    }\n  },\n  actions: {\n    addErrorLog ({ commit, rootState }, info) {\n      if (!window.location.href.includes('error_logger_page')) commit('setHasReadErrorLoggerStatus', false)\n      const { user: { token, userId, userName } } = rootState\n      let data = {\n        ...info,\n        time: Date.parse(new Date()),\n        token,\n        userId,\n        userName\n      }\n      saveErrorLogger(info).then(() => {\n        commit('addError', data)\n      })\n    }\n  }\n}\n"]}]}