{"remainingRequest":"/Users/szt/Documents/szt/iview-admin/node_modules/thread-loader/dist/cjs.js!/Users/szt/Documents/szt/iview-admin/node_modules/babel-loader/lib/index.js!/Users/szt/Documents/szt/iview-admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/szt/Documents/szt/iview-admin/src/libs/util.js","dependencies":[{"path":"/Users/szt/Documents/szt/iview-admin/src/libs/util.js","mtime":1539597142000},{"path":"/Users/szt/Documents/szt/iview-admin/.babelrc","mtime":1539597141000},{"path":"/Users/szt/Documents/szt/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":1539597352000},{"path":"/Users/szt/Documents/szt/iview-admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/szt/Documents/szt/iview-admin/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/Users/szt/Documents/szt/iview-admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.find-index\";\nimport _toConsumableArray from \"/Users/szt/Documents/szt/iview-admin/node_modules/@babel/runtime/helpers/builtin/es6/toConsumableArray\";\nimport _objectSpread from \"/Users/szt/Documents/szt/iview-admin/node_modules/@babel/runtime/helpers/builtin/es6/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\nimport Cookies from 'js-cookie'; // cookie保存的天数\n\nimport config from '@/config';\nimport { forEach, hasOneOf, objEqual } from '@/libs/tools';\nexport var TOKEN_KEY = 'token';\nexport var setToken = function setToken(token) {\n  Cookies.set(TOKEN_KEY, token, {\n    expires: config.cookieExpires || 1\n  });\n};\nexport var getToken = function getToken() {\n  var token = Cookies.get(TOKEN_KEY);\n  if (token) return token;else return false;\n};\nexport var hasChild = function hasChild(item) {\n  return item.children && item.children.length !== 0;\n};\n\nvar showThisMenuEle = function showThisMenuEle(item, access) {\n  if (item.meta && item.meta.access && item.meta.access.length) {\n    if (hasOneOf(item.meta.access, access)) return true;else return false;\n  } else return true;\n};\n/**\n * @param {Array} list 通过路由列表得到菜单列表\n * @returns {Array}\n */\n\n\nexport var getMenuByRouter = function getMenuByRouter(list, access) {\n  var res = [];\n  forEach(list, function (item) {\n    if (!item.meta || item.meta && !item.meta.hideInMenu) {\n      var obj = {\n        icon: item.meta && item.meta.icon || '',\n        name: item.name,\n        meta: item.meta\n      };\n\n      if ((hasChild(item) || item.meta && item.meta.showAlways) && showThisMenuEle(item, access)) {\n        obj.children = getMenuByRouter(item.children, access);\n      }\n\n      if (item.meta && item.meta.href) obj.href = item.meta.href;\n      if (showThisMenuEle(item, access)) res.push(obj);\n    }\n  });\n  return res;\n};\n/**\n * @param {Array} routeMetched 当前路由metched\n * @returns {Array}\n */\n\nexport var getBreadCrumbList = function getBreadCrumbList(route, homeRoute) {\n  var homeItem = _objectSpread({}, homeRoute, {\n    icon: homeRoute.meta.icon\n  });\n\n  var routeMetched = route.matched;\n  if (routeMetched.some(function (item) {\n    return item.name === homeRoute.name;\n  })) return [homeItem];\n  var res = routeMetched.filter(function (item) {\n    return item.meta === undefined || !item.meta.hide;\n  }).map(function (item) {\n    var meta = _objectSpread({}, item.meta);\n\n    if (meta.title && typeof meta.title === 'function') meta.title = meta.title(route);\n    var obj = {\n      icon: item.meta && item.meta.icon || '',\n      name: item.name,\n      meta: meta\n    };\n    return obj;\n  });\n  res = res.filter(function (item) {\n    return !item.meta.hideInMenu;\n  });\n  return [_objectSpread({}, homeItem, {\n    to: homeRoute.path\n  })].concat(_toConsumableArray(res));\n};\nexport var getRouteTitleHandled = function getRouteTitleHandled(route) {\n  var router = _objectSpread({}, route);\n\n  var meta = _objectSpread({}, route.meta);\n\n  if (meta.title && typeof meta.title === 'function') meta.title = meta.title(router);\n  router.meta = meta;\n  return router;\n};\nexport var showTitle = function showTitle(item, vm) {\n  return vm.$config.useI18n ? vm.$t(item.name) : item.meta && item.meta.title || item.name;\n};\n/**\n * @description 本地存储和获取标签导航列表\n */\n\nexport var setTagNavListInLocalstorage = function setTagNavListInLocalstorage(list) {\n  localStorage.tagNaveList = JSON.stringify(list);\n};\n/**\n * @returns {Array} 其中的每个元素只包含路由原信息中的name, path, meta三项\n */\n\nexport var getTagNavListFromLocalstorage = function getTagNavListFromLocalstorage() {\n  var list = localStorage.tagNaveList;\n  return list ? JSON.parse(list) : [];\n};\n/**\n * @param {Array} routers 路由列表数组\n * @description 用于找到路由列表中name为home的对象\n */\n\nexport var getHomeRoute = function getHomeRoute(routers) {\n  var homeName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'home';\n  var i = -1;\n  var len = routers.length;\n  var homeRoute = {};\n\n  while (++i < len) {\n    var item = routers[i];\n\n    if (item.children && item.children.length) {\n      var res = getHomeRoute(item.children, homeName);\n      if (res.name) return res;\n    } else {\n      if (item.name === homeName) homeRoute = item;\n    }\n  }\n\n  return homeRoute;\n};\n/**\n * @param {*} list 现有标签导航列表\n * @param {*} newRoute 新添加的路由原信息对象\n * @description 如果该newRoute已经存在则不再添加\n */\n\nexport var getNewTagList = function getNewTagList(list, newRoute) {\n  var name = newRoute.name,\n      path = newRoute.path,\n      meta = newRoute.meta;\n\n  var newList = _toConsumableArray(list);\n\n  if (newList.findIndex(function (item) {\n    return item.name === name;\n  }) >= 0) return newList;else newList.push({\n    name: name,\n    path: path,\n    meta: meta\n  });\n  return newList;\n};\n/**\n * @param {*} access 用户权限数组，如 ['super_admin', 'admin']\n * @param {*} route 路由列表\n */\n\nvar hasAccess = function hasAccess(access, route) {\n  if (route.meta && route.meta.access) return hasOneOf(access, route.meta.access);else return true;\n};\n/**\n * 权鉴\n * @param {*} name 即将跳转的路由name\n * @param {*} access 用户权限数组\n * @param {*} routes 路由列表\n * @description 用户是否可跳转到该页\n */\n\n\nexport var canTurnTo = function canTurnTo(name, access, routes) {\n  var routePermissionJudge = function routePermissionJudge(list) {\n    return list.some(function (item) {\n      if (item.children && item.children.length) {\n        return routePermissionJudge(item.children);\n      } else if (item.name === name) {\n        return hasAccess(access, item);\n      }\n    });\n  };\n\n  return routePermissionJudge(routes);\n};\n/**\n * @param {String} url\n * @description 从URL中解析参数\n */\n\nexport var getParams = function getParams(url) {\n  var keyValueArr = url.split('?')[1].split('&');\n  var paramObj = {};\n  keyValueArr.forEach(function (item) {\n    var keyValue = item.split('=');\n    paramObj[keyValue[0]] = keyValue[1];\n  });\n  return paramObj;\n};\n/**\n * @param {Array} list 标签列表\n * @param {String} name 当前关闭的标签的name\n */\n\nexport var getNextRoute = function getNextRoute(list, route) {\n  var res = {};\n\n  if (list.length === 2) {\n    res = getHomeRoute(list);\n  } else {\n    var index = list.findIndex(function (item) {\n      return routeEqual(item, route);\n    });\n    console.log(route, index, list.length);\n    if (index === list.length - 1) res = list[list.length - 2];else res = list[index + 1];\n  }\n\n  return res;\n};\n/**\n * @param {Number} times 回调函数需要执行的次数\n * @param {Function} callback 回调函数\n */\n\nexport var doCustomTimes = function doCustomTimes(times, callback) {\n  var i = -1;\n\n  while (++i < times) {\n    callback(i);\n  }\n};\n/**\n * @param {Object} file 从上传组件得到的文件对象\n * @returns {Promise} resolve参数是解析后的二维数组\n * @description 从Csv文件中解析出表格，解析成二维数组\n */\n\nexport var getArrayFromFile = function getArrayFromFile(file) {\n  var nameSplit = file.name.split('.');\n  var format = nameSplit[nameSplit.length - 1];\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    reader.readAsText(file); // 以文本格式读取\n\n    var arr = [];\n\n    reader.onload = function (evt) {\n      var data = evt.target.result; // 读到的数据\n\n      var pasteData = data.trim();\n      arr = pasteData.split(/[\\n\\u0085\\u2028\\u2029]|\\r\\n?/g).map(function (row) {\n        return row.split('\\t');\n      }).map(function (item) {\n        return item[0].split(',');\n      });\n      if (format === 'csv') resolve(arr);else reject(new Error('[Format Error]:你上传的不是Csv文件'));\n    };\n  });\n};\n/**\n * @param {Array} array 表格数据二维数组\n * @returns {Object} { columns, tableData }\n * @description 从二维数组中获取表头和表格数据，将第一行作为表头，用于在iView的表格中展示数据\n */\n\nexport var getTableDataFromArray = function getTableDataFromArray(array) {\n  var columns = [];\n  var tableData = [];\n\n  if (array.length > 1) {\n    var titles = array.shift();\n    columns = titles.map(function (item) {\n      return {\n        title: item,\n        key: item\n      };\n    });\n    tableData = array.map(function (item) {\n      var res = {};\n      item.forEach(function (col, i) {\n        res[titles[i]] = col;\n      });\n      return res;\n    });\n  }\n\n  return {\n    columns: columns,\n    tableData: tableData\n  };\n};\nexport var findNodeUpper = function findNodeUpper(ele, tag) {\n  if (ele.parentNode) {\n    if (ele.parentNode.tagName === tag.toUpperCase()) {\n      return ele.parentNode;\n    } else {\n      return findNodeUpper(ele.parentNode, tag);\n    }\n  }\n};\nexport var findNodeUpperByClasses = function findNodeUpperByClasses(ele, classes) {\n  var parentNode = ele.parentNode;\n\n  if (parentNode) {\n    var classList = parentNode.classList;\n\n    if (classList && classes.every(function (className) {\n      return classList.contains(className);\n    })) {\n      return parentNode;\n    } else {\n      return findNodeUpperByClasses(parentNode, classes);\n    }\n  }\n};\nexport var findNodeDownward = function findNodeDownward(ele, tag) {\n  var tagName = tag.toUpperCase();\n\n  if (ele.childNodes.length) {\n    var i = -1;\n    var len = ele.childNodes.length;\n\n    while (++i < len) {\n      var child = ele.childNodes[i];\n      if (child.tagName === tagName) return child;else return findNodeDownward(child, tag);\n    }\n  }\n};\nexport var showByAccess = function showByAccess(access, canViewAccess) {\n  return hasOneOf(canViewAccess, access);\n};\n/**\n * @description 根据name/params/query判断两个路由对象是否相等\n * @param {*} route1 路由对象\n * @param {*} route2 路由对象\n */\n\nexport var routeEqual = function routeEqual(route1, route2) {\n  var params1 = route1.params || {};\n  var params2 = route2.params || {};\n  var query1 = route1.query || {};\n  var query2 = route2.query || {};\n  return route1.name === route2.name && objEqual(params1, params2) && objEqual(query1, query2);\n};\n/**\n * 判断打开的标签列表里是否已存在这个新添加的路由对象\n */\n\nexport var routeHasExist = function routeHasExist(tagNavList, routeItem) {\n  var len = tagNavList.length;\n  var res = false;\n  doCustomTimes(len, function (index) {\n    if (routeEqual(tagNavList[index], routeItem)) res = true;\n  });\n  return res;\n};\nexport var localSave = function localSave(key, value) {\n  localStorage.setItem(key, value);\n};\nexport var localRead = function localRead(key) {\n  return localStorage.getItem(key) || '';\n};",{"version":3,"sources":["src/libs/util.js"],"names":["Cookies","config","forEach","hasOneOf","objEqual","TOKEN_KEY","setToken","token","set","expires","cookieExpires","getToken","get","hasChild","item","children","length","showThisMenuEle","access","meta","getMenuByRouter","list","res","hideInMenu","obj","icon","name","showAlways","href","push","getBreadCrumbList","route","homeRoute","homeItem","routeMetched","matched","some","filter","undefined","hide","map","title","to","path","getRouteTitleHandled","router","showTitle","vm","$config","useI18n","$t","setTagNavListInLocalstorage","localStorage","tagNaveList","JSON","stringify","getTagNavListFromLocalstorage","parse","getHomeRoute","routers","homeName","i","len","getNewTagList","newRoute","newList","findIndex","hasAccess","canTurnTo","routes","routePermissionJudge","getParams","keyValueArr","url","split","paramObj","keyValue","getNextRoute","index","routeEqual","console","log","doCustomTimes","times","callback","getArrayFromFile","file","nameSplit","format","Promise","resolve","reject","reader","FileReader","readAsText","arr","onload","evt","data","target","result","pasteData","trim","row","Error","getTableDataFromArray","array","columns","tableData","titles","shift","key","col","findNodeUpper","ele","tag","parentNode","tagName","toUpperCase","findNodeUpperByClasses","classes","classList","every","contains","className","findNodeDownward","childNodes","child","showByAccess","canViewAccess","route1","route2","params1","params","params2","query1","query","query2","routeHasExist","tagNavList","routeItem","localSave","value","setItem","localRead","getItem"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,WAApB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,OAAT,EAAkBC,QAAlB,EAA4BC,QAA5B,QAA4C,cAA5C;AAEA,OAAO,IAAMC,YAAY,OAAlB;AAEP,OAAO,IAAMC,WAAW,SAAXA,QAAW,CAACC,KAAD,EAAW;AACjCP,UAAQQ,GAAR,CAAYH,SAAZ,EAAuBE,KAAvB,EAA8B;AAACE,aAASR,OAAOS,aAAP,IAAwB;AAAlC,GAA9B;AACD,CAFM;AAIP,OAAO,IAAMC,WAAW,SAAXA,QAAW,GAAM;AAC5B,MAAMJ,QAAQP,QAAQY,GAAR,CAAYP,SAAZ,CAAd;AACA,MAAIE,KAAJ,EAAW,OAAOA,KAAP,CAAX,KACK,OAAO,KAAP;AACN,CAJM;AAMP,OAAO,IAAMM,WAAW,SAAXA,QAAW,CAACC,IAAD,EAAU;AAChC,SAAOA,KAAKC,QAAL,IAAiBD,KAAKC,QAAL,CAAcC,MAAd,KAAyB,CAAjD;AACD,CAFM;;AAIP,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACH,IAAD,EAAOI,MAAP,EAAkB;AACxC,MAAIJ,KAAKK,IAAL,IAAaL,KAAKK,IAAL,CAAUD,MAAvB,IAAiCJ,KAAKK,IAAL,CAAUD,MAAV,CAAiBF,MAAtD,EAA8D;AAC5D,QAAIb,SAASW,KAAKK,IAAL,CAAUD,MAAnB,EAA2BA,MAA3B,CAAJ,EAAwC,OAAO,IAAP,CAAxC,KACK,OAAO,KAAP;AACN,GAHD,MAGO,OAAO,IAAP;AACR,CALD;AAMA;;;;;;AAIA,OAAO,IAAME,kBAAkB,SAAlBA,eAAkB,CAACC,IAAD,EAAOH,MAAP,EAAkB;AAC/C,MAAII,MAAM,EAAV;AACApB,UAAQmB,IAAR,EAAc,gBAAQ;AACpB,QAAI,CAACP,KAAKK,IAAN,IAAeL,KAAKK,IAAL,IAAa,CAACL,KAAKK,IAAL,CAAUI,UAA3C,EAAwD;AACtD,UAAIC,MAAM;AACRC,cAAOX,KAAKK,IAAL,IAAaL,KAAKK,IAAL,CAAUM,IAAxB,IAAiC,EAD/B;AAERC,cAAMZ,KAAKY,IAFH;AAGRP,cAAML,KAAKK;AAHH,OAAV;;AAKA,UAAI,CAACN,SAASC,IAAT,KAAmBA,KAAKK,IAAL,IAAaL,KAAKK,IAAL,CAAUQ,UAA3C,KAA2DV,gBAAgBH,IAAhB,EAAsBI,MAAtB,CAA/D,EAA8F;AAC5FM,YAAIT,QAAJ,GAAeK,gBAAgBN,KAAKC,QAArB,EAA+BG,MAA/B,CAAf;AACD;;AACD,UAAIJ,KAAKK,IAAL,IAAaL,KAAKK,IAAL,CAAUS,IAA3B,EAAiCJ,IAAII,IAAJ,GAAWd,KAAKK,IAAL,CAAUS,IAArB;AACjC,UAAIX,gBAAgBH,IAAhB,EAAsBI,MAAtB,CAAJ,EAAmCI,IAAIO,IAAJ,CAASL,GAAT;AACpC;AACF,GAbD;AAcA,SAAOF,GAAP;AACD,CAjBM;AAmBP;;;;;AAIA,OAAO,IAAMQ,oBAAoB,SAApBA,iBAAoB,CAACC,KAAD,EAAQC,SAAR,EAAsB;AACrD,MAAIC,6BAAgBD,SAAhB;AAA2BP,UAAMO,UAAUb,IAAV,CAAeM;AAAhD,IAAJ;;AACA,MAAIS,eAAeH,MAAMI,OAAzB;AACA,MAAID,aAAaE,IAAb,CAAkB;AAAA,WAAQtB,KAAKY,IAAL,KAAcM,UAAUN,IAAhC;AAAA,GAAlB,CAAJ,EAA6D,OAAO,CAACO,QAAD,CAAP;AAC7D,MAAIX,MAAMY,aAAaG,MAAb,CAAoB,gBAAQ;AACpC,WAAOvB,KAAKK,IAAL,KAAcmB,SAAd,IAA2B,CAACxB,KAAKK,IAAL,CAAUoB,IAA7C;AACD,GAFS,EAEPC,GAFO,CAEH,gBAAQ;AACb,QAAIrB,yBAAWL,KAAKK,IAAhB,CAAJ;;AACA,QAAIA,KAAKsB,KAAL,IAAc,OAAOtB,KAAKsB,KAAZ,KAAsB,UAAxC,EAAoDtB,KAAKsB,KAAL,GAAatB,KAAKsB,KAAL,CAAWV,KAAX,CAAb;AACpD,QAAIP,MAAM;AACRC,YAAOX,KAAKK,IAAL,IAAaL,KAAKK,IAAL,CAAUM,IAAxB,IAAiC,EAD/B;AAERC,YAAMZ,KAAKY,IAFH;AAGRP,YAAMA;AAHE,KAAV;AAKA,WAAOK,GAAP;AACD,GAXS,CAAV;AAYAF,QAAMA,IAAIe,MAAJ,CAAW,gBAAQ;AACvB,WAAO,CAACvB,KAAKK,IAAL,CAAUI,UAAlB;AACD,GAFK,CAAN;AAGA,4BAAYU,QAAZ;AAAsBS,QAAIV,UAAUW;AAApC,gCAA8CrB,GAA9C;AACD,CApBM;AAsBP,OAAO,IAAMsB,uBAAuB,SAAvBA,oBAAuB,QAAS;AAC3C,MAAIC,2BAAad,KAAb,CAAJ;;AACA,MAAIZ,yBAAWY,MAAMZ,IAAjB,CAAJ;;AACA,MAAIA,KAAKsB,KAAL,IAAc,OAAOtB,KAAKsB,KAAZ,KAAsB,UAAxC,EAAoDtB,KAAKsB,KAAL,GAAatB,KAAKsB,KAAL,CAAWI,MAAX,CAAb;AACpDA,SAAO1B,IAAP,GAAcA,IAAd;AACA,SAAO0B,MAAP;AACD,CANM;AAQP,OAAO,IAAMC,YAAY,SAAZA,SAAY,CAAChC,IAAD,EAAOiC,EAAP;AAAA,SAAcA,GAAGC,OAAH,CAAWC,OAAX,GAAqBF,GAAGG,EAAH,CAAMpC,KAAKY,IAAX,CAArB,GAA0CZ,KAAKK,IAAL,IAAaL,KAAKK,IAAL,CAAUsB,KAAxB,IAAkC3B,KAAKY,IAA9F;AAAA,CAAlB;AAEP;;;;AAGA,OAAO,IAAMyB,8BAA8B,SAA9BA,2BAA8B,OAAQ;AACjDC,eAAaC,WAAb,GAA2BC,KAAKC,SAAL,CAAelC,IAAf,CAA3B;AACD,CAFM;AAGP;;;;AAGA,OAAO,IAAMmC,gCAAgC,SAAhCA,6BAAgC,GAAM;AACjD,MAAMnC,OAAO+B,aAAaC,WAA1B;AACA,SAAOhC,OAAOiC,KAAKG,KAAL,CAAWpC,IAAX,CAAP,GAA0B,EAAjC;AACD,CAHM;AAKP;;;;;AAIA,OAAO,IAAMqC,eAAe,SAAfA,YAAe,CAACC,OAAD,EAAgC;AAAA,MAAtBC,QAAsB,uEAAX,MAAW;AAC1D,MAAIC,IAAI,CAAC,CAAT;AACA,MAAIC,MAAMH,QAAQ3C,MAAlB;AACA,MAAIgB,YAAY,EAAhB;;AACA,SAAO,EAAE6B,CAAF,GAAMC,GAAb,EAAkB;AAChB,QAAIhD,OAAO6C,QAAQE,CAAR,CAAX;;AACA,QAAI/C,KAAKC,QAAL,IAAiBD,KAAKC,QAAL,CAAcC,MAAnC,EAA2C;AACzC,UAAIM,MAAMoC,aAAa5C,KAAKC,QAAlB,EAA4B6C,QAA5B,CAAV;AACA,UAAItC,IAAII,IAAR,EAAc,OAAOJ,GAAP;AACf,KAHD,MAGO;AACL,UAAIR,KAAKY,IAAL,KAAckC,QAAlB,EAA4B5B,YAAYlB,IAAZ;AAC7B;AACF;;AACD,SAAOkB,SAAP;AACD,CAdM;AAgBP;;;;;;AAKA,OAAO,IAAM+B,gBAAgB,SAAhBA,aAAgB,CAAC1C,IAAD,EAAO2C,QAAP,EAAoB;AAAA,MACvCtC,IADuC,GAClBsC,QADkB,CACvCtC,IADuC;AAAA,MACjCiB,IADiC,GAClBqB,QADkB,CACjCrB,IADiC;AAAA,MAC3BxB,IAD2B,GAClB6C,QADkB,CAC3B7C,IAD2B;;AAE/C,MAAI8C,6BAAc5C,IAAd,CAAJ;;AACA,MAAI4C,QAAQC,SAAR,CAAkB;AAAA,WAAQpD,KAAKY,IAAL,KAAcA,IAAtB;AAAA,GAAlB,KAAiD,CAArD,EAAwD,OAAOuC,OAAP,CAAxD,KACKA,QAAQpC,IAAR,CAAa;AAAEH,cAAF;AAAQiB,cAAR;AAAcxB;AAAd,GAAb;AACL,SAAO8C,OAAP;AACD,CANM;AAQP;;;;;AAIA,IAAME,YAAY,SAAZA,SAAY,CAACjD,MAAD,EAASa,KAAT,EAAmB;AACnC,MAAIA,MAAMZ,IAAN,IAAcY,MAAMZ,IAAN,CAAWD,MAA7B,EAAqC,OAAOf,SAASe,MAAT,EAAiBa,MAAMZ,IAAN,CAAWD,MAA5B,CAAP,CAArC,KACK,OAAO,IAAP;AACN,CAHD;AAKA;;;;;;;;;AAOA,OAAO,IAAMkD,YAAY,SAAZA,SAAY,CAAC1C,IAAD,EAAOR,MAAP,EAAemD,MAAf,EAA0B;AACjD,MAAMC,uBAAuB,SAAvBA,oBAAuB,CAACjD,IAAD,EAAU;AACrC,WAAOA,KAAKe,IAAL,CAAU,gBAAQ;AACvB,UAAItB,KAAKC,QAAL,IAAiBD,KAAKC,QAAL,CAAcC,MAAnC,EAA2C;AACzC,eAAOsD,qBAAqBxD,KAAKC,QAA1B,CAAP;AACD,OAFD,MAEO,IAAID,KAAKY,IAAL,KAAcA,IAAlB,EAAwB;AAC7B,eAAOyC,UAAUjD,MAAV,EAAkBJ,IAAlB,CAAP;AACD;AACF,KANM,CAAP;AAOD,GARD;;AAUA,SAAOwD,qBAAqBD,MAArB,CAAP;AACD,CAZM;AAcP;;;;;AAIA,OAAO,IAAME,YAAY,SAAZA,SAAY,MAAO;AAC9B,MAAMC,cAAcC,IAAIC,KAAJ,CAAU,GAAV,EAAe,CAAf,EAAkBA,KAAlB,CAAwB,GAAxB,CAApB;AACA,MAAIC,WAAW,EAAf;AACAH,cAAYtE,OAAZ,CAAoB,gBAAQ;AAC1B,QAAM0E,WAAW9D,KAAK4D,KAAL,CAAW,GAAX,CAAjB;AACAC,aAASC,SAAS,CAAT,CAAT,IAAwBA,SAAS,CAAT,CAAxB;AACD,GAHD;AAIA,SAAOD,QAAP;AACD,CARM;AAUP;;;;;AAIA,OAAO,IAAME,eAAe,SAAfA,YAAe,CAACxD,IAAD,EAAOU,KAAP,EAAiB;AAC3C,MAAIT,MAAM,EAAV;;AACA,MAAID,KAAKL,MAAL,KAAgB,CAApB,EAAuB;AACrBM,UAAMoC,aAAarC,IAAb,CAAN;AACD,GAFD,MAEO;AACL,QAAMyD,QAAQzD,KAAK6C,SAAL,CAAe;AAAA,aAAQa,WAAWjE,IAAX,EAAiBiB,KAAjB,CAAR;AAAA,KAAf,CAAd;AACAiD,YAAQC,GAAR,CAAYlD,KAAZ,EAAmB+C,KAAnB,EAA0BzD,KAAKL,MAA/B;AACA,QAAI8D,UAAUzD,KAAKL,MAAL,GAAc,CAA5B,EAA+BM,MAAMD,KAAKA,KAAKL,MAAL,GAAc,CAAnB,CAAN,CAA/B,KACKM,MAAMD,KAAKyD,QAAQ,CAAb,CAAN;AACN;;AACD,SAAOxD,GAAP;AACD,CAXM;AAaP;;;;;AAIA,OAAO,IAAM4D,gBAAgB,SAAhBA,aAAgB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAChD,MAAIvB,IAAI,CAAC,CAAT;;AACA,SAAO,EAAEA,CAAF,GAAMsB,KAAb,EAAoB;AAClBC,aAASvB,CAAT;AACD;AACF,CALM;AAOP;;;;;;AAKA,OAAO,IAAMwB,mBAAmB,SAAnBA,gBAAmB,CAACC,IAAD,EAAU;AACxC,MAAIC,YAAYD,KAAK5D,IAAL,CAAUgD,KAAV,CAAgB,GAAhB,CAAhB;AACA,MAAIc,SAASD,UAAUA,UAAUvE,MAAV,GAAmB,CAA7B,CAAb;AACA,SAAO,IAAIyE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIC,SAAS,IAAIC,UAAJ,EAAb;AACAD,WAAOE,UAAP,CAAkBR,IAAlB,EAFsC,CAEd;;AACxB,QAAIS,MAAM,EAAV;;AACAH,WAAOI,MAAP,GAAgB,UAAUC,GAAV,EAAe;AAC7B,UAAIC,OAAOD,IAAIE,MAAJ,CAAWC,MAAtB,CAD6B,CACA;;AAC7B,UAAIC,YAAYH,KAAKI,IAAL,EAAhB;AACAP,YAAMM,UAAU3B,KAAV,CAAiB,+BAAjB,EAAmDlC,GAAnD,CAAuD,eAAO;AAClE,eAAO+D,IAAI7B,KAAJ,CAAU,IAAV,CAAP;AACD,OAFK,EAEHlC,GAFG,CAEC,gBAAQ;AACb,eAAO1B,KAAK,CAAL,EAAQ4D,KAAR,CAAc,GAAd,CAAP;AACD,OAJK,CAAN;AAKA,UAAIc,WAAW,KAAf,EAAsBE,QAAQK,GAAR,EAAtB,KACKJ,OAAO,IAAIa,KAAJ,CAAU,4BAAV,CAAP;AACN,KAVD;AAWD,GAfM,CAAP;AAgBD,CAnBM;AAqBP;;;;;;AAKA,OAAO,IAAMC,wBAAwB,SAAxBA,qBAAwB,CAACC,KAAD,EAAW;AAC9C,MAAIC,UAAU,EAAd;AACA,MAAIC,YAAY,EAAhB;;AACA,MAAIF,MAAM1F,MAAN,GAAe,CAAnB,EAAsB;AACpB,QAAI6F,SAASH,MAAMI,KAAN,EAAb;AACAH,cAAUE,OAAOrE,GAAP,CAAW,gBAAQ;AAC3B,aAAO;AACLC,eAAO3B,IADF;AAELiG,aAAKjG;AAFA,OAAP;AAID,KALS,CAAV;AAMA8F,gBAAYF,MAAMlE,GAAN,CAAU,gBAAQ;AAC5B,UAAIlB,MAAM,EAAV;AACAR,WAAKZ,OAAL,CAAa,UAAC8G,GAAD,EAAMnD,CAAN,EAAY;AACvBvC,YAAIuF,OAAOhD,CAAP,CAAJ,IAAiBmD,GAAjB;AACD,OAFD;AAGA,aAAO1F,GAAP;AACD,KANW,CAAZ;AAOD;;AACD,SAAO;AACLqF,oBADK;AAELC;AAFK,GAAP;AAID,CAvBM;AAyBP,OAAO,IAAMK,gBAAgB,SAAhBA,aAAgB,CAACC,GAAD,EAAMC,GAAN,EAAc;AACzC,MAAID,IAAIE,UAAR,EAAoB;AAClB,QAAIF,IAAIE,UAAJ,CAAeC,OAAf,KAA2BF,IAAIG,WAAJ,EAA/B,EAAkD;AAChD,aAAOJ,IAAIE,UAAX;AACD,KAFD,MAEO;AACL,aAAOH,cAAcC,IAAIE,UAAlB,EAA8BD,GAA9B,CAAP;AACD;AACF;AACF,CARM;AAUP,OAAO,IAAMI,yBAAyB,SAAzBA,sBAAyB,CAACL,GAAD,EAAMM,OAAN,EAAkB;AACtD,MAAIJ,aAAaF,IAAIE,UAArB;;AACA,MAAIA,UAAJ,EAAgB;AACd,QAAIK,YAAYL,WAAWK,SAA3B;;AACA,QAAIA,aAAaD,QAAQE,KAAR,CAAc;AAAA,aAAaD,UAAUE,QAAV,CAAmBC,SAAnB,CAAb;AAAA,KAAd,CAAjB,EAA4E;AAC1E,aAAOR,UAAP;AACD,KAFD,MAEO;AACL,aAAOG,uBAAuBH,UAAvB,EAAmCI,OAAnC,CAAP;AACD;AACF;AACF,CAVM;AAYP,OAAO,IAAMK,mBAAmB,SAAnBA,gBAAmB,CAACX,GAAD,EAAMC,GAAN,EAAc;AAC5C,MAAME,UAAUF,IAAIG,WAAJ,EAAhB;;AACA,MAAIJ,IAAIY,UAAJ,CAAe9G,MAAnB,EAA2B;AACzB,QAAI6C,IAAI,CAAC,CAAT;AACA,QAAIC,MAAMoD,IAAIY,UAAJ,CAAe9G,MAAzB;;AACA,WAAO,EAAE6C,CAAF,GAAMC,GAAb,EAAkB;AAChB,UAAIiE,QAAQb,IAAIY,UAAJ,CAAejE,CAAf,CAAZ;AACA,UAAIkE,MAAMV,OAAN,KAAkBA,OAAtB,EAA+B,OAAOU,KAAP,CAA/B,KACK,OAAOF,iBAAiBE,KAAjB,EAAwBZ,GAAxB,CAAP;AACN;AACF;AACF,CAXM;AAaP,OAAO,IAAMa,eAAe,SAAfA,YAAe,CAAC9G,MAAD,EAAS+G,aAAT,EAA2B;AACrD,SAAO9H,SAAS8H,aAAT,EAAwB/G,MAAxB,CAAP;AACD,CAFM;AAIP;;;;;;AAKA,OAAO,IAAM6D,aAAa,SAAbA,UAAa,CAACmD,MAAD,EAASC,MAAT,EAAoB;AAC5C,MAAMC,UAAUF,OAAOG,MAAP,IAAiB,EAAjC;AACA,MAAMC,UAAUH,OAAOE,MAAP,IAAiB,EAAjC;AACA,MAAME,SAASL,OAAOM,KAAP,IAAgB,EAA/B;AACA,MAAMC,SAASN,OAAOK,KAAP,IAAgB,EAA/B;AACA,SAAQN,OAAOxG,IAAP,KAAgByG,OAAOzG,IAAxB,IAAiCtB,SAASgI,OAAT,EAAkBE,OAAlB,CAAjC,IAA+DlI,SAASmI,MAAT,EAAiBE,MAAjB,CAAtE;AACD,CANM;AAQP;;;;AAGA,OAAO,IAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,UAAD,EAAaC,SAAb,EAA2B;AACtD,MAAI9E,MAAM6E,WAAW3H,MAArB;AACA,MAAIM,MAAM,KAAV;AACA4D,gBAAcpB,GAAd,EAAmB,UAACgB,KAAD,EAAW;AAC5B,QAAIC,WAAW4D,WAAW7D,KAAX,CAAX,EAA8B8D,SAA9B,CAAJ,EAA8CtH,MAAM,IAAN;AAC/C,GAFD;AAGA,SAAOA,GAAP;AACD,CAPM;AASP,OAAO,IAAMuH,YAAY,SAAZA,SAAY,CAAC9B,GAAD,EAAM+B,KAAN,EAAgB;AACvC1F,eAAa2F,OAAb,CAAqBhC,GAArB,EAA0B+B,KAA1B;AACD,CAFM;AAIP,OAAO,IAAME,YAAY,SAAZA,SAAY,CAACjC,GAAD,EAAS;AAChC,SAAO3D,aAAa6F,OAAb,CAAqBlC,GAArB,KAA6B,EAApC;AACD,CAFM","sourceRoot":"/Users/szt/Documents/szt/iview-admin","sourcesContent":["import Cookies from 'js-cookie'\n// cookie保存的天数\nimport config from '@/config'\nimport { forEach, hasOneOf, objEqual } from '@/libs/tools'\n\nexport const TOKEN_KEY = 'token'\n\nexport const setToken = (token) => {\n  Cookies.set(TOKEN_KEY, token, {expires: config.cookieExpires || 1})\n}\n\nexport const getToken = () => {\n  const token = Cookies.get(TOKEN_KEY)\n  if (token) return token\n  else return false\n}\n\nexport const hasChild = (item) => {\n  return item.children && item.children.length !== 0\n}\n\nconst showThisMenuEle = (item, access) => {\n  if (item.meta && item.meta.access && item.meta.access.length) {\n    if (hasOneOf(item.meta.access, access)) return true\n    else return false\n  } else return true\n}\n/**\n * @param {Array} list 通过路由列表得到菜单列表\n * @returns {Array}\n */\nexport const getMenuByRouter = (list, access) => {\n  let res = []\n  forEach(list, item => {\n    if (!item.meta || (item.meta && !item.meta.hideInMenu)) {\n      let obj = {\n        icon: (item.meta && item.meta.icon) || '',\n        name: item.name,\n        meta: item.meta\n      }\n      if ((hasChild(item) || (item.meta && item.meta.showAlways)) && showThisMenuEle(item, access)) {\n        obj.children = getMenuByRouter(item.children, access)\n      }\n      if (item.meta && item.meta.href) obj.href = item.meta.href\n      if (showThisMenuEle(item, access)) res.push(obj)\n    }\n  })\n  return res\n}\n\n/**\n * @param {Array} routeMetched 当前路由metched\n * @returns {Array}\n */\nexport const getBreadCrumbList = (route, homeRoute) => {\n  let homeItem = { ...homeRoute, icon: homeRoute.meta.icon }\n  let routeMetched = route.matched\n  if (routeMetched.some(item => item.name === homeRoute.name)) return [homeItem]\n  let res = routeMetched.filter(item => {\n    return item.meta === undefined || !item.meta.hide\n  }).map(item => {\n    let meta = {...item.meta}\n    if (meta.title && typeof meta.title === 'function') meta.title = meta.title(route)\n    let obj = {\n      icon: (item.meta && item.meta.icon) || '',\n      name: item.name,\n      meta: meta\n    }\n    return obj\n  })\n  res = res.filter(item => {\n    return !item.meta.hideInMenu\n  })\n  return [{...homeItem, to: homeRoute.path}, ...res]\n}\n\nexport const getRouteTitleHandled = route => {\n  let router = {...route}\n  let meta = {...route.meta}\n  if (meta.title && typeof meta.title === 'function') meta.title = meta.title(router)\n  router.meta = meta\n  return router\n}\n\nexport const showTitle = (item, vm) => vm.$config.useI18n ? vm.$t(item.name) : ((item.meta && item.meta.title) || item.name)\n\n/**\n * @description 本地存储和获取标签导航列表\n */\nexport const setTagNavListInLocalstorage = list => {\n  localStorage.tagNaveList = JSON.stringify(list)\n}\n/**\n * @returns {Array} 其中的每个元素只包含路由原信息中的name, path, meta三项\n */\nexport const getTagNavListFromLocalstorage = () => {\n  const list = localStorage.tagNaveList\n  return list ? JSON.parse(list) : []\n}\n\n/**\n * @param {Array} routers 路由列表数组\n * @description 用于找到路由列表中name为home的对象\n */\nexport const getHomeRoute = (routers, homeName = 'home') => {\n  let i = -1\n  let len = routers.length\n  let homeRoute = {}\n  while (++i < len) {\n    let item = routers[i]\n    if (item.children && item.children.length) {\n      let res = getHomeRoute(item.children, homeName)\n      if (res.name) return res\n    } else {\n      if (item.name === homeName) homeRoute = item\n    }\n  }\n  return homeRoute\n}\n\n/**\n * @param {*} list 现有标签导航列表\n * @param {*} newRoute 新添加的路由原信息对象\n * @description 如果该newRoute已经存在则不再添加\n */\nexport const getNewTagList = (list, newRoute) => {\n  const { name, path, meta } = newRoute\n  let newList = [...list]\n  if (newList.findIndex(item => item.name === name) >= 0) return newList\n  else newList.push({ name, path, meta })\n  return newList\n}\n\n/**\n * @param {*} access 用户权限数组，如 ['super_admin', 'admin']\n * @param {*} route 路由列表\n */\nconst hasAccess = (access, route) => {\n  if (route.meta && route.meta.access) return hasOneOf(access, route.meta.access)\n  else return true\n}\n\n/**\n * 权鉴\n * @param {*} name 即将跳转的路由name\n * @param {*} access 用户权限数组\n * @param {*} routes 路由列表\n * @description 用户是否可跳转到该页\n */\nexport const canTurnTo = (name, access, routes) => {\n  const routePermissionJudge = (list) => {\n    return list.some(item => {\n      if (item.children && item.children.length) {\n        return routePermissionJudge(item.children)\n      } else if (item.name === name) {\n        return hasAccess(access, item)\n      }\n    })\n  }\n\n  return routePermissionJudge(routes)\n}\n\n/**\n * @param {String} url\n * @description 从URL中解析参数\n */\nexport const getParams = url => {\n  const keyValueArr = url.split('?')[1].split('&')\n  let paramObj = {}\n  keyValueArr.forEach(item => {\n    const keyValue = item.split('=')\n    paramObj[keyValue[0]] = keyValue[1]\n  })\n  return paramObj\n}\n\n/**\n * @param {Array} list 标签列表\n * @param {String} name 当前关闭的标签的name\n */\nexport const getNextRoute = (list, route) => {\n  let res = {}\n  if (list.length === 2) {\n    res = getHomeRoute(list)\n  } else {\n    const index = list.findIndex(item => routeEqual(item, route))\n    console.log(route, index, list.length)\n    if (index === list.length - 1) res = list[list.length - 2]\n    else res = list[index + 1]\n  }\n  return res\n}\n\n/**\n * @param {Number} times 回调函数需要执行的次数\n * @param {Function} callback 回调函数\n */\nexport const doCustomTimes = (times, callback) => {\n  let i = -1\n  while (++i < times) {\n    callback(i)\n  }\n}\n\n/**\n * @param {Object} file 从上传组件得到的文件对象\n * @returns {Promise} resolve参数是解析后的二维数组\n * @description 从Csv文件中解析出表格，解析成二维数组\n */\nexport const getArrayFromFile = (file) => {\n  let nameSplit = file.name.split('.')\n  let format = nameSplit[nameSplit.length - 1]\n  return new Promise((resolve, reject) => {\n    let reader = new FileReader()\n    reader.readAsText(file) // 以文本格式读取\n    let arr = []\n    reader.onload = function (evt) {\n      let data = evt.target.result // 读到的数据\n      let pasteData = data.trim()\n      arr = pasteData.split((/[\\n\\u0085\\u2028\\u2029]|\\r\\n?/g)).map(row => {\n        return row.split('\\t')\n      }).map(item => {\n        return item[0].split(',')\n      })\n      if (format === 'csv') resolve(arr)\n      else reject(new Error('[Format Error]:你上传的不是Csv文件'))\n    }\n  })\n}\n\n/**\n * @param {Array} array 表格数据二维数组\n * @returns {Object} { columns, tableData }\n * @description 从二维数组中获取表头和表格数据，将第一行作为表头，用于在iView的表格中展示数据\n */\nexport const getTableDataFromArray = (array) => {\n  let columns = []\n  let tableData = []\n  if (array.length > 1) {\n    let titles = array.shift()\n    columns = titles.map(item => {\n      return {\n        title: item,\n        key: item\n      }\n    })\n    tableData = array.map(item => {\n      let res = {}\n      item.forEach((col, i) => {\n        res[titles[i]] = col\n      })\n      return res\n    })\n  }\n  return {\n    columns,\n    tableData\n  }\n}\n\nexport const findNodeUpper = (ele, tag) => {\n  if (ele.parentNode) {\n    if (ele.parentNode.tagName === tag.toUpperCase()) {\n      return ele.parentNode\n    } else {\n      return findNodeUpper(ele.parentNode, tag)\n    }\n  }\n}\n\nexport const findNodeUpperByClasses = (ele, classes) => {\n  let parentNode = ele.parentNode\n  if (parentNode) {\n    let classList = parentNode.classList\n    if (classList && classes.every(className => classList.contains(className))) {\n      return parentNode\n    } else {\n      return findNodeUpperByClasses(parentNode, classes)\n    }\n  }\n}\n\nexport const findNodeDownward = (ele, tag) => {\n  const tagName = tag.toUpperCase()\n  if (ele.childNodes.length) {\n    let i = -1\n    let len = ele.childNodes.length\n    while (++i < len) {\n      let child = ele.childNodes[i]\n      if (child.tagName === tagName) return child\n      else return findNodeDownward(child, tag)\n    }\n  }\n}\n\nexport const showByAccess = (access, canViewAccess) => {\n  return hasOneOf(canViewAccess, access)\n}\n\n/**\n * @description 根据name/params/query判断两个路由对象是否相等\n * @param {*} route1 路由对象\n * @param {*} route2 路由对象\n */\nexport const routeEqual = (route1, route2) => {\n  const params1 = route1.params || {}\n  const params2 = route2.params || {}\n  const query1 = route1.query || {}\n  const query2 = route2.query || {}\n  return (route1.name === route2.name) && objEqual(params1, params2) && objEqual(query1, query2)\n}\n\n/**\n * 判断打开的标签列表里是否已存在这个新添加的路由对象\n */\nexport const routeHasExist = (tagNavList, routeItem) => {\n  let len = tagNavList.length\n  let res = false\n  doCustomTimes(len, (index) => {\n    if (routeEqual(tagNavList[index], routeItem)) res = true\n  })\n  return res\n}\n\nexport const localSave = (key, value) => {\n  localStorage.setItem(key, value)\n}\n\nexport const localRead = (key) => {\n  return localStorage.getItem(key) || ''\n}\n"]}]}